package com.poc.investor.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
public class AuthController {
    private static final Logger LOGGER = LoggerFactory.getLogger(AuthController.class);

    private AuthenticationManager authenticationManager;
    private static JwtEncoder jwtEncoder = null;

    public AuthController(AuthenticationManager authenticationManager, JwtEncoder jwtEncoder) {
        this.authenticationManager = authenticationManager;
        this.jwtEncoder = jwtEncoder;
    }

    /**
     * Generate JWT from jwtEncoder by the set of jwtClaims
     * to see all users take a look at SecurityConfig.java method userDetailsService
     * <p>
     * <p>
     * curl --location --request POST 'http://localhost:1717/token' \
     * --header 'Authorization: Basic ##user:password in base64 ##'
     * for examle admin:1234 is c21haWw6MTIzNA== with base64
     * <p>
     * curl --location 'http://localhost:1717/investors' \
     * --header 'Authorization: Bearer ##token generated by AuthController.token##'
     *
     * @param authentication Retrieve information of users already logged in.
     * @return
     */
    @PostMapping("/tokenBasic")
    public Map<String, String> requestForTokenBasic(Authentication authentication) {
        //generate JWT from jwtEncoder by the set of jwtClaims
        return getJwtClaimsSet(authentication, false);
    }

    /**
     * link
     * curl --location 'http://localhost:1717/token' \
     * --header 'Content-Type: application/x-www-form-urlencoded' \
     * --data-urlencode 'username=superadmin' \
     * --data-urlencode 'password=1234' \
     * --data-urlencode 'withRefreshToken=true'
     *
     * @param username
     * @param password
     * @param withRefreshToken
     * @return
     */
    @PostMapping("/token")
    public Map<String, String> requestForToken(String username, String password, boolean withRefreshToken) {
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
        //generate JWT from jwtEncoder by the set of jwtClaims
        return getJwtClaimsSet(authentication, withRefreshToken);
    }


    private static Map<String, String> getJwtClaimsSet(Authentication authentication, Boolean withRefreshToken) {
        Instant instant = Instant.now();
        String subject = authentication.getName();
        String issuer = "investor";
        String scopes = authentication.getAuthorities().stream().map(grantedAuthority -> grantedAuthority.getAuthority()).collect(Collectors.joining(" "));
        JwtClaimsSet jwtClaimsSet = JwtClaimsSet.builder().subject(authentication.getName())//userName already logged in
                .subject(subject)
                .issuedAt(instant)//created datetime
                .expiresAt(instant.plus(withRefreshToken ? 1 : 5, ChronoUnit.MINUTES))
                .issuer(issuer)//name of application that generate token
                .claim("scope", scopes)//Authorities of users logged in
                .build();
        Map<String, String> tokens=new HashMap<>();
        
        tokens.put("accessToken", jwtEncoder.encode(JwtEncoderParameters.from(jwtClaimsSet)).getTokenValue());

        if (withRefreshToken) {
            // no scopes here
            JwtClaimsSet jwtClaimsSetRefresh = JwtClaimsSet.builder()
                    .subject(subject)
                    .issuedAt(instant)
                    .expiresAt(instant.plus(5, ChronoUnit.MINUTES))
                    .issuer(issuer)
                    .build();
            String jwtRefreshToken = jwtEncoder.encode(JwtEncoderParameters.from(jwtClaimsSetRefresh)).getTokenValue();
            tokens.put("refreshToken", jwtRefreshToken);
        }
        return tokens;
    }


}